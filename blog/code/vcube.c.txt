#include <math.h>
#include <stdio.h>
#include <stdlib.h>

#include "smpl.h"
#include "cisj.h"


#define TEST 1
#define FAULT 2
#define RECOVERY 3


typedef struct {
    int id;
    int *state;
} Process;

Process *procs;


int first_correct(int j, int s) {
    int size = pow(2, s - 1);

    node_set *c = cis(j, s);

    int first_correct = -1;

    for (int k = 0; k < size; k++) {
        int p = c->nodes[k];

        if (!status(procs[p].id)) {
            first_correct = p;
            break;
        }
    }

    set_free(c);

    return first_correct;
}

int *alloc_state(int N, int self) {
    int *state = (int *) malloc(sizeof(int) * N);

    for (int i = 0; i < N; i++)
        state[i] = -1;

    state[self] = 0;

    return state;
}

void free_procs(Process *procs, int n) {
    for (int i = 0; i < n; i++)
        free(procs[i].state);

    free(procs);

    return;
}

int main(int argc, char *argv[]) {
    int token, event, r, t;
    char fa_name[5];

    if (argc != 3) {
        puts("Correct usage: ./vcube <num procs> <max time>\n");
        exit(1);
    }

    int n = atoi(argv[1]);
    int max_time = atoi(argv[2]);

    smpl(0, "A VCube implementation");
    reset();
    stream(1);

    procs = (Process*) malloc(sizeof(Process) * n);

    for (int i = 0; i < n; i++) {
        memset(fa_name, '\0', 5);
        sprintf(fa_name, "%d", i);

        procs[i].id = facility(fa_name, 1);
        procs[i].state = alloc_state(n, i);
    }

    // Test schedules
    for (int i = 0; i < n; i++)
        schedule(TEST, 30.0, i);

    // Fault/recovery schedules
    schedule(FAULT, 31.0, 1);
    schedule(FAULT, 31.0, 2);
    schedule(FAULT, 31.0, 4);
    schedule(FAULT, 31.0, 7);
    
    schedule(RECOVERY, 149.0, 1);
    schedule(RECOVERY, 149.0, 2);
    schedule(RECOVERY, 149.0, 4);
    schedule(RECOVERY, 149.0, 7);

    // Main loop
    while (time() < max_time) {
        cause(&event, &token);

        switch (event) {
            case TEST:
                if (status(procs[token].id) != 0)
                    break;

                printf(
                    "Sou o processo %d e estou testando no tempo %4.1f\n",
                    token, time()
                );

                int n_log = log2(n);

                for (int s = 1; s <= n_log; s++) {
                    printf("\ts: %d/%d | c(%d, %d): ", s, n_log, token, s);
                    int size = pow(2, s - 1);

                    // Gets the c(i, s)
                    node_set *c = cis(token, s);

                    // Prints the c(i, s)
                    for (int j = 0; j < (size - 1); j++)
                        printf("%d, ", c->nodes[j]);
                    printf("%d\n", c->nodes[size - 1]);

                    // Test the process
                    for (int j = 0; j < size; j++) {
                        int p = c->nodes[j];

                        int fc = first_correct(p, s);
                        if (fc != token && fc != -1)
                            continue;

                        printf("\t\tSou o primeiro processo correto em c(%d, %d)\n", p, s);

                        if (!status(procs[p].id)) {
                            printf("\t\tTestando %d: CORRETO\n", p);
                            if (procs[token].state[p] % 2 == 1)
                                procs[token].state[p]++;

                            // Updates STATE
                            for (int i = 0; i < n; i++)
                                if (procs[p].state[i] > procs[token].state[i])
                                    procs[token].state[i] = procs[p].state[i];
                        } else {
                            printf("\t\tTestando %d: FALHO\n", p);
                            if (procs[token].state[p] % 2 == 0)
                                procs[token].state[p]++;
                        }
                    }

                    set_free(c);
                }

                printf("\tSTATE[]:\n");

                for (int i = 0; i < n; i++) {
                    printf("\t\t%d: ", i);

                    int s = procs[token].state[i];

                    if (s == -1)
                        printf("UNKNOWN\n");
                    else if (s % 2 == 0)
                        printf("CORRETO\n");
                    else if (s % 2 == 1)
                        printf("FALHO\n");
                }

                schedule(TEST, 30.0, token);

                break;
            case FAULT:
                r = request(procs[token].id, token, 0);

                procs[token].state[token]++; // Increment to set to fault

                printf(
                    "Sou o processo %d e estou falhando no tempo %4.1f\n",
                    token, time()
                );

                break;
            case RECOVERY:
                release(procs[token].id, token);

                procs[token].state[token]++; // Increment to set to correct

                printf(
                    "Sou o processo %d e estou recuperando no tempo %4.1f\n",
                    token, time()
                );

                schedule(TEST, 1.0, token);

                break;
        }
    }

    free_procs(procs, n);
}
